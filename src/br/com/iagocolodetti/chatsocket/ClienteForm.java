package br.com.iagocolodetti.chatsocket;

import java.awt.Cursor;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author iagocolodetti
 */
public class ClienteForm extends javax.swing.JFrame {

    private final int MIN_PORTA = 0;
    private final int MAX_PORTA = 65535;

    private Cliente cliente;
    
    private final DefaultTableModel jtParticipantesModel;

    /**
     * Creates new form ClienteForm
     */
    public ClienteForm() {
        initComponents();

        jtaChat.setEditable(false);
        jtaChat.setCursor(new Cursor(Cursor.TEXT_CURSOR));

        DefaultCaret caret = (DefaultCaret) jtaChat.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        
        jtParticipantesModel = (DefaultTableModel) jtParticipantes.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfPorta = new javax.swing.JTextField();
        jtfIP = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jbConectar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaChat = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaMensagem = new javax.swing.JTextArea();
        jbEnviar = new javax.swing.JButton();
        jbLimparMensagem = new javax.swing.JButton();
        jbLimparChat = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jtfNome = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtParticipantes = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ChatSocket (Cliente)");
        setName("ClienteForm"); // NOI18N
        setResizable(false);

        jtfPorta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtfPorta.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jtfIP.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtfIP.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("IP:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Porta:");

        jbConectar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jbConectar.setText("CONECTAR");
        jbConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConectarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chat", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jtaChat.setColumns(20);
        jtaChat.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtaChat.setLineWrap(true);
        jtaChat.setRows(5);
        jtaChat.setWrapStyleWord(true);
        jtaChat.setFocusable(false);
        jScrollPane1.setViewportView(jtaChat);

        jtaMensagem.setColumns(20);
        jtaMensagem.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtaMensagem.setLineWrap(true);
        jtaMensagem.setRows(3);
        jtaMensagem.setWrapStyleWord(true);
        jtaMensagem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtaMensagemKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtaMensagemKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jtaMensagem);

        jbEnviar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbEnviar.setText("Enviar");
        jbEnviar.setEnabled(false);
        jbEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEnviarActionPerformed(evt);
            }
        });

        jbLimparMensagem.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbLimparMensagem.setText("Limpar Mensagem");
        jbLimparMensagem.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbLimparMensagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimparMensagemActionPerformed(evt);
            }
        });

        jbLimparChat.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbLimparChat.setText("Limpar Chat");
        jbLimparChat.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jbLimparChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimparChatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jbLimparChat, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbLimparMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbLimparChat)
                        .addComponent(jbLimparMensagem))
                    .addComponent(jbEnviar))
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Nome:");

        jtfNome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtfNome.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Participantes", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        jtParticipantes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtParticipantes.setRowSelectionAllowed(false);
        jScrollPane3.setViewportView(jtParticipantes);
        if (jtParticipantes.getColumnModel().getColumnCount() > 0) {
            jtParticipantes.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfIP, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfPorta, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtfNome, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jtfPorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbConectar)
                    .addComponent(jLabel3)
                    .addComponent(jtfNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConectarActionPerformed
        if (jbConectar.getText().equals("CONECTAR")) {
            String ip = jtfIP.getText().trim();
            if (!ip.isEmpty()) {
                String sPorta = jtfPorta.getText().trim();
                if (!sPorta.isEmpty()) {
                    try {
                        int porta = Integer.parseInt(sPorta);
                        if (porta >= MIN_PORTA && porta <= MAX_PORTA) {
                            String nome = jtfNome.getText().trim();
                            if (!nome.isEmpty()) {
                                conectar(ip, porta, nome);
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Digite o nome de usuário que pretende usar.", "Erro", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "O número da porta deve ser um inteiro positivo de no mínimo " + MIN_PORTA + " e no máximo " + MAX_PORTA + ".", "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(rootPane, "A porta deve ser um número inteiro positivo de no mínimo " + MIN_PORTA + " e no máximo " + MAX_PORTA + ".", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Digite a porta do servidor.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Digite o ip do servidor.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            addMensagem("Você saiu do chat.");
            desconectar();
        }
    }//GEN-LAST:event_jbConectarActionPerformed

    private void jbEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEnviarActionPerformed
        enviarMensagem();
    }//GEN-LAST:event_jbEnviarActionPerformed

    private void jbLimparMensagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimparMensagemActionPerformed
        jtaMensagem.setText("");
    }//GEN-LAST:event_jbLimparMensagemActionPerformed

    private void jbLimparChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimparChatActionPerformed
        jtaChat.setText("");
    }//GEN-LAST:event_jbLimparChatActionPerformed

    private void jtaMensagemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtaMensagemKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            enviarMensagem();
        }
    }//GEN-LAST:event_jtaMensagemKeyPressed

    private void jtaMensagemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtaMensagemKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && jbConectar.getText().equals("DESCONECTAR") && cliente != null) {
            jtaMensagem.setText(jtaMensagem.getText().trim());
        }
    }//GEN-LAST:event_jtaMensagemKeyReleased

    private void addMensagem(String texto) {
        if (jtaChat.getText().toString().isEmpty()) {
            jtaChat.append(texto);
        } else {
            jtaChat.append("\n" + texto);
        }
    }
    
    private void addParticipantes(String[] nomes) {
        for (String nome : nomes) {
            jtParticipantesModel.addRow(new Object[]{ nome });
        }
    }
    
    private void addParticipante(String nome) {
        jtParticipantesModel.addRow(new Object[]{ nome });
    }
    
    private void removerParticipante(String nome) {
        for (int i = 0; i < jtParticipantesModel.getRowCount(); i++) {
            if (jtParticipantesModel.getValueAt(i, 0).equals(nome)) {
                jtParticipantesModel.removeRow(i);
                break;
            }
        }
    }

    private void conectar(String ip, int porta, String nome) {
        jtfIP.setEditable(false);
        jtfIP.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        jtfPorta.setEditable(false);
        jtfPorta.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        jtfNome.setEditable(false);
        jtfNome.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        jbConectar.setText("DESCONECTAR");
        jbEnviar.setEnabled(true);
        cliente = new Cliente(ip, porta, nome);
        Thread thread = new Thread(cliente);
        thread.start();
    }

    private void desconectar() {
        if (cliente != null) {
            cliente.fechar();
        }
        cliente = null;
        jtfIP.setEditable(true);
        jtfPorta.setEditable(true);
        jtfNome.setEditable(true);
        jbConectar.setText("CONECTAR");
        jbEnviar.setEnabled(false);
        jtParticipantesModel.setRowCount(0);
    }
    
    private void enviarMensagem() {
        if (jbConectar.getText().equals("DESCONECTAR") && cliente != null) {
            String mensagem = jtaMensagem.getText();
            if (!mensagem.isEmpty()) {
                try {
                    jtaMensagem.setText("");
                    cliente.enviar(mensagem.trim());
                    jtaMensagem.requestFocus();
                } catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(rootPane, "Não foi possível enviar a mensagem.", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "O campo destinado a mensagem está vazio.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void processarMensagem(String mensagem) {
        if (!mensagem.isEmpty()) {
            switch (mensagem.charAt(0)) {
                case 'm':
                    addMensagem(mensagem.substring(1));
                    break;
                case 'e':
                    addMensagem(mensagem.substring(1));
                    addParticipante(mensagem.substring(1, mensagem.indexOf(" ")));
                    break;
                case 's':
                    addMensagem(mensagem.substring(1));
                    removerParticipante(mensagem.substring(1, mensagem.indexOf(" ")));
                    break;
                case 'p':
                    addMensagem("Você entrou no chat.");
                    addParticipantes(mensagem.substring(1).split(" "));
                    break;
            }
        }
    }

    private class Cliente implements Runnable {

        private Socket socket;
        
        private volatile boolean conectado;

        private final String ip;
        private final int porta;
        private final String nome;

        public Cliente(String ip, int porta, String nome) {
            conectado = true;
            this.ip = ip;
            this.porta = porta;
            this.nome = nome;
        }

        public void fechar() {
            conectado = false;
            try {
                if (socket != null) {
                    socket.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                socket = null;
            }
        }
        
        public void enviar(String mensagem) throws IOException {
            if (conectado) {
                try {
                    DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
                    dos.writeUTF(mensagem.trim());
                    addMensagem("Você: " + mensagem.trim());
                } catch (IOException e) {
                    throw e;
                }
            }
        }

        @Override
        public void run() {
            try {
                socket = new Socket(ip, porta);
                
                try {
                    DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
                    dos.writeUTF(nome);
                } catch (Exception e) {
                    if (conectado) {
                        addMensagem("Conexão encerrada.");
                    }
                    desconectar();
                    return;
                }
                
                while (conectado) {
                    try {
                        DataInputStream dis = new DataInputStream(socket.getInputStream());
                        String mensagem = dis.readUTF();
                        processarMensagem(mensagem);
                    } catch (IOException e) {
                        if (conectado) {
                            addMensagem("Conexão encerrada.");
                        }
                        desconectar();
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(rootPane, "Não foi possível realizar a conexão. Verifique se o servidor está aberto e se o ip e a porta estão corretos.", "Erro", JOptionPane.ERROR_MESSAGE);
                desconectar();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
                    e.printStackTrace();
                }
                ClienteForm clientForm = new ClienteForm();
                clientForm.setSize(800, 540);
                clientForm.setLocation(
                        (Toolkit.getDefaultToolkit().getScreenSize().width - clientForm.getWidth()) / 2,
                        (Toolkit.getDefaultToolkit().getScreenSize().height - clientForm.getHeight()) / 2);
                clientForm.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbConectar;
    private javax.swing.JButton jbEnviar;
    private javax.swing.JButton jbLimparChat;
    private javax.swing.JButton jbLimparMensagem;
    private javax.swing.JTable jtParticipantes;
    private javax.swing.JTextArea jtaChat;
    private javax.swing.JTextArea jtaMensagem;
    private javax.swing.JTextField jtfIP;
    private javax.swing.JTextField jtfNome;
    private javax.swing.JTextField jtfPorta;
    // End of variables declaration//GEN-END:variables
}
